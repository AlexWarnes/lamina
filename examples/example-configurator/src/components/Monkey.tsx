/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useMemo } from 'react'
import { useGLTF, Center, Bounds, TransformControls, OrbitControls } from '@react-three/drei'
import LayerStack from './LayerStack'
import { Box3 } from 'three'

export default function Monkey() {
  const { nodes, scene } = useGLTF('/monkey.glb') as any
  const orbitControls = React.useRef<any>(null!)
  const transformControls = React.useRef<any>(null!)

  React.useEffect(() => {
    if (transformControls.current) {
      const { current: controls } = transformControls
      const callback = (event: any) => (orbitControls.current.enabled = !event.value)
      controls.addEventListener('dragging-changed', callback)
      return () => controls.removeEventListener('dragging-changed', callback)
    }
  })

  const [a, b] = useMemo(() => {
    const bbox = new Box3().setFromObject(scene)
    return [bbox.min, bbox.max]
  }, [scene])

  return (
    <>
      <TransformControls ref={transformControls}>
        <group scale={0.1} rotation={[0, -Math.PI / 2, Math.PI / 4]}>
          <mesh matrixAutoUpdate geometry={nodes.Suzanne.geometry} rotation-y={Math.PI / 2} scale={30}>
            <LayerStack
              options={{
                Gradient: {
                  a: a,
                  b: b,
                },
              }}
            />
          </mesh>
        </group>
      </TransformControls>
      <OrbitControls ref={orbitControls} />
    </>
  )
}

useGLTF.preload('/monkey.glb')
